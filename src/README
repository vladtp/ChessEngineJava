	Chess Engine - Project for Algorithm Design

	Team formed by:
	-> Vlad Tiriplica - 321CA
	-> Costin-Tudor Rachieru - 324CA
	-> Eren Murat - 324CA

	STAGE 1:
		We chose to approach this project from an object oriented perspective:
		-> The boardgame is a Singleton and has an "init()" method that
	reinitializes the board to the beginning position. This class contains
	the following:
			- A matrix that contains "Piece" elements where there is a piece
		and "null" where it is not.
			- An ArrayList with the white pieces.
			- An ArrayList with the black pieces.
		-> The pieces are created using a factory. Each type of piece (Pawn,
	Root, Knight, Bishop, Queen, King) extends the "Piece" class. Each of this
	pieces has a method that returns the possible moves that can be done from
	its position.

		In this stage we implemented just the movement of the Pawns, and we
	assumed that we will ran out of movements before it will be check mate.
	The engine searches for the first Pawn that can be moved (from left to
	right) and he will try to move one forward / on diagonally / en-passand in
	this order.

		About the comunication with the xboard:
		-> the "xboard" command does not influence the engine.
		-> the "new" command reinitializes the boardgame.
		-> the "force" command makes the engine to not think and just move what
	it's told to be moved. After "force" the engine waits for the "white" or
	"black" command, followed by a "go" command, or just a "go".
		-> the "white" command makes the engine play as white.
		-> the "black" command makes the engine play as black.
		-> the "go" command makes the engine do the next move imediately.
		-> imediately afte the "protover 2" command the engine will tell the
	xboard "feature sigint=0 done=1", so that it will not receive sigint
	interuptions.
		-> at "quit" the engine stops.
		-> after the engine receives a command with the pattern
	letter-number-letter-number(-letter) it thinks the next move and outputs
	"move letter-number-letter-number".

	STAGE 2:
	    We continued to implement the movements for the other pieces, including
	ent-passant,castling and pawn promotion to simulate a realistic chess game.
	For every piece we generate an array of legal moves. Each move will be
	tested and state of the board will be evaluated in the minimax algorithm
	and the move that grants the best outcome after the depth moves will
	actually be performed. If the move is not the best, the state of the board
	will be reverted to its previous state.
        To ensure that the array contains only the legal moves, we implemented
    the function isMoveValid() that verifies if the given move will put the king
	in check.
        To evaluate each state we adopted a combination of static values for
	each type of piece and relative value based on its positioning. The static
	values are also used to calculate the material which is the sum of the
	values of the available pieces, excluding the king. The material is used to
	determine the stage of the game. We need this evaluation because the
	relative value for the king changes in the final stages of the game.
	In other words, we need to encourage the king to position differently in
	the endgame. In calculating the score, we also take into consideration the
	possibility to castle.
        To revert to the previous state of the game, we need a history for every
	piece containing information about line, column and any pieces were
	captured. These captured pieces are also revived.

		Link repository: https://github.com/CostinRachieru/ChessEngine
